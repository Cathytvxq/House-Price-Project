distinct(data,month)
distinct(data,dep_time)
distinct(data,airports)
distinct(data,carrier)
sample_n(data, 4)
sample_frac(data, 0.00001)
by_origin <- group_by(data,origin)
by_origin
response <- summarise(by_origin, count=n(),
dist = mean(distance, na.rm=TRUE),
delay = mean(arr_delay, na.rm=TRUE))
response
delay_pipe <- data %>%
filter(!is.na(dep_delay)) %>%
group_by(origin) %>%
summarise(
dist = mean(distance, na.rm =TRUE),
delay = mean(dep_delay),
count =n()) %>%
filter(count>0)
delay_pipe
delay <- sample_frac(select(data, arr_delay), 0.01)
library("ggplot2")
#delay = mean(arr_delay, na.rm=TRUE)
ggplot(delay, aes(x=dist, y=delay))+
geom_point(aes(color=count, size=count))+
geom_smooth()+
scale_size_area()
library(nycflights13)
library(dplyr)
data=flights
dim(data)
tail(data)
str(data)
filter_1 <- filter(data, month==9 | month==10, day<2)
filter_1
slice_1 <- slice(data, 1:10)
slice_1
arrange(data[1:5,4:6], dep_delay)
arrange(data[1:5,4:6], desc(dep_delay))
arrange(data[1:5,],year, month, day)
arrange(data[1:5,],dep_time, arr_time)
select(data, year:day)
select(data, starts_with("dep_"))
distinct(data, origin, dest)
distinct(data,month)
distinct(data,dep_time)
distinct(data,airports)
distinct(data,carrier)
sample_n(data, 4)
sample_frac(data, 0.00001)
by_origin <- group_by(data,origin)
by_origin
response <- summarise(by_origin, count=n(),
dist = mean(distance, na.rm=TRUE),
delay = mean(arr_delay, na.rm=TRUE))
response
delay_pipe <- data %>%
filter(!is.na(dep_delay)) %>%
group_by(origin) %>%
summarise(
dist = mean(distance, na.rm =TRUE),
delay = mean(dep_delay),
count =n()) %>%
filter(count>0)
delay_pipe
delay <- sample_frac(select(data, arr_delay), 0.001)
library("ggplot2")
#delay = mean(arr_delay, na.rm=TRUE)
ggplot(delay, aes(x=dist, y=delay))+
geom_point(aes(color=count, size=count))+
geom_smooth()+
scale_size_area()
library(nycflights13)
library(dplyr)
data=flights
dim(data)
tail(data)
str(data)
filter_1 <- filter(data, month==9 | month==10, day<2)
filter_1
slice_1 <- slice(data, 1:10)
slice_1
arrange(data[1:5,4:6], dep_delay)
arrange(data[1:5,4:6], desc(dep_delay))
arrange(data[1:5,],year, month, day)
arrange(data[1:5,],dep_time, arr_time)
select(data, year:day)
select(data, starts_with("dep_"))
distinct(data, origin, dest)
distinct(data,month)
distinct(data,dep_time)
distinct(data,airports)
distinct(data,carrier)
sample_n(data, 4)
sample_frac(data, 0.00001)
by_origin <- group_by(data,origin)
by_origin
response <- summarise(by_origin, count=n(),
dist = mean(distance, na.rm=TRUE),
delay = mean(arr_delay, na.rm=TRUE))
response
delay_pipe <- data %>%
filter(!is.na(dep_delay)) %>%
group_by(origin) %>%
summarise(
dist = mean(distance, na.rm =TRUE),
delay = mean(dep_delay),
count =n()) %>%
filter(count>0)
delay_pipe
delay <- sample_frac(select(data, arr_delay), 0.0005)
library("ggplot2")
#delay = mean(arr_delay, na.rm=TRUE)
ggplot(delay, aes(x=dist, y=delay))+
geom_point(aes(color=count, size=count))+
geom_smooth()+
scale_size_area()
library(nycflights13)
library(dplyr)
data=flights
dim(data)
tail(data)
str(data)
filter_1 <- filter(data, month==9 | month==10, day<2)
filter_1
slice_1 <- slice(data, 1:10)
slice_1
arrange(data[1:5,4:6], dep_delay)
arrange(data[1:5,4:6], desc(dep_delay))
arrange(data[1:5,],year, month, day)
arrange(data[1:5,],dep_time, arr_time)
select(data, year:day)
select(data, starts_with("dep_"))
distinct(data, origin, dest)
distinct(data,month)
distinct(data,dep_time)
distinct(data,airports)
distinct(data,carrier)
sample_n(data, 4)
sample_frac(data, 0.00001)
by_origin <- group_by(data,origin)
by_origin
response <- summarise(by_origin, count=n(),
dist = mean(distance, na.rm=TRUE),
delay = mean(arr_delay, na.rm=TRUE))
response
delay_pipe <- data %>%
filter(!is.na(dep_delay)) %>%
group_by(origin) %>%
summarise(
dist = mean(distance, na.rm =TRUE),
delay = mean(dep_delay),
count =n()) %>%
filter(count>0)
delay_pipe
delay <- sample_frac(select(data, arr_delay), 0.0005)
count=n()
library("ggplot2")
#delay = mean(arr_delay, na.rm=TRUE)
ggplot(delay, aes(x=dist, y=delay))+
geom_point(aes(color=count, size=count))+
geom_smooth()+
scale_size_area()
count(delay)
library(nycflights13)
library(dplyr)
data=flights
dim(data)
tail(data)
str(data)
filter_1 <- filter(data, month==9 | month==10, day<2)
filter_1
slice_1 <- slice(data, 1:10)
slice_1
arrange(data[1:5,4:6], dep_delay)
arrange(data[1:5,4:6], desc(dep_delay))
arrange(data[1:5,],year, month, day)
arrange(data[1:5,],dep_time, arr_time)
select(data, year:day)
select(data, starts_with("dep_"))
distinct(data, origin, dest)
distinct(data,month)
distinct(data,dep_time)
distinct(data,airports)
distinct(data,carrier)
sample_n(data, 4)
sample_frac(data, 0.00001)
by_origin <- group_by(data,origin)
by_origin
response <- summarise(by_origin, count=n(),
dist = mean(distance, na.rm=TRUE),
delay = mean(arr_delay, na.rm=TRUE))
response
delay_pipe <- data %>%
filter(!is.na(dep_delay)) %>%
group_by(origin) %>%
summarise(
dist = mean(distance, na.rm =TRUE),
delay = mean(dep_delay),
count =n()) %>%
filter(count>0)
delay_pipe
delay <- sample_frac(select(data, arr_delay), 0.0005)
count(delay)
library("ggplot2")
#delay = mean(arr_delay, na.rm=TRUE)
ggplot(delay, aes(x=dist, y=delay))+
geom_point(aes(color=count, size=count))+
geom_smooth()+
scale_size_area()
ggplot(delay, aes(x=dist, y=delay))
library("ggplot2")
#delay = mean(arr_delay, na.rm=TRUE)
ggplot(delay, aes(x=dist, y=delay))+
geom_point(aes(color=19, size=19))+
geom_smooth()+
scale_size_area()
delay <- sample_frac(select(data, arr_delay), 0.0005)
count(delay)
library("ggplot2")
#delay = mean(arr_delay, na.rm=TRUE)
ggplot(delay, aes(x=dist, y=delay))+
geom_point(aes(color=19, size=19))+
geom_smooth()+
scale_size_area()
delay <- select(data, arr_delay)#sample_frac(select(data, arr_delay), 0.0005)
count(delay)
library("ggplot2")
#delay = mean(arr_delay, na.rm=TRUE)
ggplot(delay, aes(x=dist, y=delay))+
geom_point(aes(color=19, size=19))+
geom_smooth()+
scale_size_area()
delay
delay=group_by(data,arr_delay,distance)
#dist=select(data,distance)
library("ggplot2")
ggplot(delay, aes(x=distance,y=arr_delay))+
geom_point(aes(color=200,size=10))+
geom_smooth()+
scale_size_area()
filter(!is.na(arr_delay))
delay=group_by(data,arr_delay,distance)
#dist=select(data,distance)
library("ggplot2")
ggplot(delay, aes(x=distance,y=arr_delay))+
geom_point(aes(color=200,size=10))+
geom_smooth()+
scale_size_area()
delay_pipe <- data %>%
filter(!is.na(dep_delay)) %>%
group_by(origin) %>%
summarise(
dist = distance,
delay = dep_delay,
count =n()) %>%
filter(count>0)
delay_pipe
ggplot(delay_pipe, aes(x=distance,y=arr_delay))+
geom_point(aes(color=200,size=10))+
geom_smooth()+
scale_size_area()
delay_pipe <- data %>%
filter(!is.na(dep_delay)) %>%
group_by(origin) %>%
summarise(
dist = distance,
delay = dep_delay,
count =n()) %>%
filter(count>0)
delay_pipe
ggplot(delay_pipe, aes(x=dist,y=delay))+
geom_point(aes(color=200,size=10))+
geom_smooth()+
scale_size_area()
delay_pipe <- data %>%
filter(!is.na(dep_delay)) %>%
#group_by(origin) %>%
summarise(
dist = distance,
delay = dep_delay,
count =n()) %>%
filter(count>0)
delay_pipe
ggplot(delay_pipe, aes(x=dist,y=delay))+
geom_point(aes(color=200,size=10))+
geom_smooth()+
scale_size_area()
delay_pipe <- data %>%
filter(!is.na(dep_delay)) %>%
#group_by(origin) %>%
summarise(
dist = distance,
delay = dep_delay,
#count =n()) %>%
#filter(count>0)
delay_pipe
ggplot(delay_pipe, aes(x=dist,y=delay))+
geom_point(aes(color=200,size=10))+
geom_smooth()+
scale_size_area()
library(ggplot2)
head(crime)
head("crime")
require(MASS)
require("MASS")
head(Boston)
str(Boston)
# K-means实战：Flower Clustering
# Problem: 通过花的不同部位的大小,对花的品种进行聚类
# install.packages("fpc")
library(fpc)
data(iris)
head(iris)
# 0-1 正规化数据
# 此处对iris的4个feature做数据正规化,每个feature均是花的某个不为的尺寸。
min.max.norm <- function(x){
(x-min(x))/(max(x)-min(x))
}
raw.data <- iris[,1:4]
norm.data <- data.frame(sl = min.max.norm(raw.data[,1]),
sw = min.max.norm(raw.data[,2]),
pl = min.max.norm(raw.data[,3]),
pw = min.max.norm(raw.data[,4]))
# norm.data
head(norm.data)
# k取2到8,评估K
K <- 2:8
round <- 30 # 每次迭代30次,避免局部最优
# 计算轮廓系数：Silhouette Coefficient
rst <- sapply(K, function(i) {
print(paste("K=", i))
mean(sapply(1:round,function(r) {
# print(paste("Round", r))
result <- kmeans(norm.data, i)
stats <- cluster.stats(dist(norm.data), result$cluster)
stats$avg.silwidth
}))
})
rst
plot(K,rst,type='l',main='Silhouette Coefficient vs K', ylab='Silhouette Coefficient')
old.par <- par(mfrow = c(1,2))
?cluster.stats
old.par
?cmdscale
old.par <- par(mfrow = c(1,2))
old.par
k = 2 # 根据上面的评估 k=2最优
clu <- kmeans(norm.data,k)
mds = cmdscale(dist(norm.data,method="euclidean"))
plot(mds, col=clu$cluster, main='kmeans - k=2', pch = 19)
plot(mds, col=iris$Species, main='Original clusters', pch = 19)
par(old.par)
rst <- sapply(K, function(i) {
print(paste("K=", i))
mean(sapply(1:round,function(r) {
# print(paste("Round", r))
result <- kmeans(norm.data, i)
str(result)
stats <- cluster.stats(dist(norm.data), result$cluster)
stats$avg.silwidth
}))
})
rst
file <- '/Users/cathy/Nodejs/DataAnalytics/Project/data/morley.csv'
# dataTxt <- read.table('SHcommunityUTF8.txt')
data <- read.csv('morley.csv', head = T)#, as.is = TRUE
data <- read.csv(file, head = T)#, as.is = TRUE
View(data)
?trainControl
??trainControl
install.packages("rmarkdown")
library(rmarkdown)
favstats(~fastest, data = m111survey)
favstats(~fastest, data = m111survey)
require(mosaic)
require(tigerstats)
require(iris)
data(iris)
plot(iris)
library(class)
library(dplyr)
library(ggplot2)
library(car) #vif
Sys.getlocale(category = "LC_ALL")
Sys.setlocale(category = "LC_ALL", locale = "zh_CN.UTF-8")
setwd("/Users/cathy/Nodejs/DataAnalytics/Project/Processing")
file <- '/Users/cathy/Nodejs/DataAnalytics/Project/data/SHcommunity.csv'
data <- read.csv(file, header = T, as.is = TRUE )
data0 <- data
head(data0)
summary(data0)
data1 <- filter(data0, !is.na(community_id))
data1 <- filter(data0, (district!="") & (plate!="")) #去掉district／plate没有的行 828/21285=3.8%
data1[(data1$age > 100),'age'] <- 0
data1_price <- filter(data1, (price > 0))
districtPrice <- data1_price %>%
filter(!is.na(community_name))%>%
group_by(district)%>%
summarise(
avrPrice = ceiling(mean(price, na.rm = TRUE)),
minPrice = min(price, na.rm = TRUE),
maxPrice = max(price, na.rm = TRUE)
)%>%
filter(minPrice > 0)
View(districtPrice)
data1_price_model1 <- filter(data1_price, (age>0) & (house_count >0))
data1_price_model1 <- select(data1_price_model1, price, age, lat, lng, house_count, building_count)
hist(data1_price_model1$age)
hist(data1_price_model1$house_count)
hist(data1_price_model1$building_count)
hist(data1_price_model1$price)
hist(data1_price_model1$age)
hist(data1_price_model1$house_count)
hist(data1_price_model1$building_count)
hist(data1_price_model1$price)
library(caret)
library(lattice)
library(caret)
set.seed(111)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.lm <- train(price~., data=data1_price_model1, method="lm", metric="RMSE",
preProc=c("center", "scale"), trControl=train_control)
print(fit.lm)
set.seed(111)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.lm <- train(price~., data=data1_price_model1, method="lm", metric="RMSE",
preProc=c("center", "scale"), trControl=train_control)
print(fit.lm)
set.seed(222)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.glm <- train(price~., data=data1_price_model1, method="glm", metric="Accuracy",
preProc=c("center", "scale"), trControl=train_control)
print(fit.glm)
set.seed(222)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.glm <- train(price~., data=data1_price_model1, method="glm", metric="Accuracy",
preProc=c("center", "scale"), trControl=train_control)
set.seed(222)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.glm <- train(price~., data=data1_price_model1, method="glm", metric="Accuracy",
preProc=c("center", "scale"), trControl=train_control)
print(fit.glm)
set.seed(333)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.lda <- train(price~., data=data1_price_model1, method="lda", metric="Accuracy",
preProc=c("center", "scale"), trControl=train_control)
print(fit.lda)
set.seed(222)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.knn <- train(price~., data=data1_price_model1, method="knn", metric="Accuracy",
preProc=c("center", "scale"), trControl=train_control)
print(fit.knn)
set.seed(222)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.knn <- train(price~., data=data1_price_model1, method="knn", metric="RMSE",
preProc=c("center", "scale"), trControl=train_control)
print(fit.knn)
set.seed(222)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.glm <- train(diabetes~., data=PimaIndiansDiabetes, method="glm", metric="RMSE",
preProc=c("center", "scale"), trControl=train_control)
print(fit.glm)
set.seed(222)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.glm <- train(price~., data=data1_price_model1, method="glm", metric="RMSE",
preProc=c("center", "scale"), trControl=train_control)
print(fit.glm)
set.seed(888)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.nb <- train(price~., data=data1_price_model1, method="nb", metric="RMSE",
trControl=train_control)
print(fit.nb)
set.seed(444)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.svm <- train(medv~., data=BostonHousing, method="svmRadial", metric="RMSE", trControl=train_control)
print(fit.svm)
set.seed(444)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.svm <- train(price~., data=data1_price_model1, method="svmRadial", metric="RMSE", trControl=train_control)
print(fit.svm)
library(kernlab)
library(kernlab)
set.seed(444)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.svm <- train(price~., data=data1_price_model1, method="svmRadial", metric="RMSE", trControl=train_control)
print(fit.svm)
set.seed(555)
train_control <- trainControl(method = "cv", number = 5)
fit.tree <- train(price~., data=data1_price_model1, method="rpart", metric="RMSE", trControl=train_control)
print(fit.tree)
library(rpart)
set.seed(555)
train_control <- trainControl(method = "cv", number = 5)
fit.tree <- train(price~., data=data1_price_model1, method="rpart", metric="RMSE", trControl=train_control)
print(fit.tree)
set.seed(333)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.knn <- train(price~., data=data1_price_model1, method="knn", metric="RMSE",
preProc=c("center", "scale"), trControl=train_control)
print(fit.knn)
set.seed(222)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.glm <- train(price~., data=data1_price_model1, method="glm", metric="RMSE",
preProc=c("center", "scale"), trControl=train_control)
print(fit.glm)
set.seed(222)
train_control <- trainControl(method = "cv", number = 5)#对数据进行采样
fit.glm <- train(price~., data=data1_price_model1, method="glm", metric="RMSE",
preProc=c("center", "scale"), trControl=train_control)
print(fit.glm)
